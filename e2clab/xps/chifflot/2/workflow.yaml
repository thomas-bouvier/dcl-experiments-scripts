# All Horovod nodes
- hosts: cloud.horovod.*
  prepare:
    - debug:
        msg: "Copying the application"
    - ansible.posix.synchronize:
        src: "{{ artifacts_dir }}/app/distributed-continual-learning"
        dest: "/root"
        copy_links: yes
    - debug:
        msg: "Copying the job config"
    - ansible.posix.synchronize:
        src: "{{ scenario_dir }}/config.yaml"
        dest: "/root/distributed-continual-learning"
    - debug:
        msg: "Mounting the storage https://www.grid5000.fr/w/Storage_Manager"
    - shell: rm -f /my-spack && ln -s /srv/storage/kerdatalille@storage1.lille.grid5000.fr/ /my-spack
    #- shell: "curl -X POST 'https://api.grid5000.fr/stable/sites/lille/storage/storage1/kerdatalille/access' -H \"Content-Type: application/json\" -d '{\"termination\" : {\"job\": {{ _self.g5k_job_id }}, \"site\": \"lille\"}}' -u 'tbouvier:{{ _self.g5k_pass }}'"
    #- shell: "mount storage1.lille.grid5000.fr:/export/group/kerdatalille /my-spack"
    - shell: "rm -f /etc/profile.d/guix.sh"
    - ansible.posix.synchronize:
        src: "{{ scenario_dir }}/z10_spack_environment.sh"
        dest: "/etc/profile.d"
    - ansible.posix.synchronize:
        src: "{{ scenario_dir }}/z20_wandb_environment.sh"
        dest: "/etc/profile.d"
    - debug:
        msg: "Compiling C++ component (if this is failing, just skip it)"
    - shell: ". /etc/profile && cd /root/distributed-continual-learning/cpp_loader || true && cmake . -DWITHOUT_CUDA=0 -D MKL_LIBRARIES=/mnt/view/chifflot-p100/lib/intel64 -D CAFFE2_USE_CUDNN=1 || true"
    - shell: ". /etc/profile && cd /root/distributed-continual-learning/cpp_loader || true && make || true"
    - shell: "cp /root/distributed-continual-learning/cpp_loader/src/neomem*.so /root/distributed-continual-learning || true"
    - shell: "cp /root/distributed-continual-learning/cpp_loader/src/neomem*.so /root/distributed-continual-learning/cpp_loader/examples || true"
    - shell: "cp /root/distributed-continual-learning/cpp_loader/src/neomem_example /root/distributed-continual-learning/cpp_loader/examples || true"
    - debug:
        msg: "Copying the model checkpoint"
    - ansible.posix.synchronize:
        src: "{{ artifacts_dir }}/checkpoint_initial_resnet50_imagenet_{{ current_repeat }}.pth.tar"
        dest: "/root/distributed-continual-learning"
    #- debug:
    #    msg: "Copying dataset"
    #- file:
    #    path: /tmp/datasets/ImageNet_blurred
    #    state: directory
    #- file:
    #    path: /dev/shm/datasets/ImageNet_blurred
    #    state: directory
    #- ansible.posix.synchronize:
    #    src: "{{ artifacts_dir }}/datasets/ImageNet_blurred/train_blurred.tar.gz"
    #    dest: "/tmp/datasets/ImageNet_blurred/"
    #- unarchive:
    #    src: /tmp/datasets/ImageNet_blurred/train_blurred.tar.gz
    #    dest: /dev/shm/datasets/ImageNet_blurred/
    #    creates: "/dev/shm/datasets/ImageNet_blurred/train/n15075141/n15075141_999.jpg"
    #    remote_src: yes
    #    group: root
    #    owner: root
    #- shell:
    #    cmd: "mv /dev/shm/datasets/ImageNet_blurred/train_blurred /dev/shm/datasets/ImageNet_blurred/train"
    #    creates: "/dev/shm/datasets/ImageNet_blurred/train/n15075141/n15075141_999.jpg"
    #- ansible.posix.synchronize:
    #    src: "{{ artifacts_dir }}/datasets/ImageNet_blurred/val_blurred.tar.gz"
    #    dest: "/tmp/datasets/ImageNet_blurred/"
    #- unarchive:
    #    src: /tmp/datasets/ImageNet_blurred/val_blurred.tar.gz
    #    dest: /dev/shm/datasets/ImageNet_blurred/
    #    creates: "/dev/shm/datasets/ImageNet_blurred/val/n15075141/ILSVRC2012_val_00049174.jpg"
    #    remote_src: yes
    #    group: root
    #    owner: root
    #- shell:
    #    cmd: "mv /dev/shm/datasets/ImageNet_blurred/val_blurred /dev/shm/datasets/ImageNet_blurred/val"
    #    creates: "/dev/shm/datasets/ImageNet_blurred/val/n15075141/ILSVRC2012_val_00049174.jpg"

# Horovod master
- hosts: cloud.horovod.1.1
  launch:
    - debug:
        msg: "Running {{ scenario_dir }}, config: {{ app_conf }}"
    - shell: ". /etc/profile && cd /root/distributed-continual-learning && LD_LIBRARY_PATH=/srv/storage/kerdatalille@storage1.lille.grid5000.fr/view/chifflot-p100/lib:/srv/storage/kerdatalille@storage1.lille.grid5000.fr/view/chifflot-p100/lib64:/srv/storage/kerdatalille@storage1.lille.grid5000.fr/view/chifflot-p100/lib/python3.10/site-packages/torch/lib horovodrun -np 2 -H {{ _self.horovod1 }}:2 --output-filename /tmp/horovodrun/logs python main.py --config {{ app_conf }} --save-dir ."
  finalize:
    - debug:
        msg: "Copying logs to host"
    - shell: "mkdir -p /root/experiments"
    - shell: "cp /tmp/horovodrun/logs /root/experiments/."
    - shell: "cp /root/distributed-continual-learning/results /root/experiments/."
    - debug:
        msg: "Copying logs from host to experiment results"
    - find:
        paths: "/root/experiments/logs/"
        recurse: yes
      register: logs_to_copy
    - fetch:
        src: "{{ item.path }}"
        dest: "{{ working_dir }}/"
        flat: no
      with_items: "{{ logs_to_copy.files }}"
    - debug:
        msg: "Copying Horovod timeline from host to experiment results"
    - fetch:
        src: "/root/experiments/timeline.json"
        dest: "{{ working_dir }}/"
        fail_on_missing: no
    - debug:
        msg: "Copying nsys profile from host to #experiment results"
    - fetch:
        src: "/root/experiments/profile.nsys-rep"
        dest: "{{ working_dir }}/"
        fail_on_missing: no
    - debug:
        msg: "Copying results from host to experiment results"
    - find:
        paths: "/root/experiments/results/"
        recurse: yes
      register: results_to_copy
    - fetch:
        src: "{{ item.path }}"
        dest: "{{ working_dir }}/"
        flat: no
      with_items: "{{ results_to_copy.files }}"
